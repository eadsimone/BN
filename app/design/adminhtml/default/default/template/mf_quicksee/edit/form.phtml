<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<div class="entry-edit">
    <?php echo $this->getFormHtml();?>
</div>
<?php echo $this->getChildHtml('form_after');?>
<script type="text/javascript">
//<![CDATA[
	
    var templateForm = new varienForm('email_template_edit_form');
    var templatePreviewForm = new varienForm('email_template_preview_form');
	var AttributeClass = {
		textareaElementId: null,
		variablesContent: null,
		dialogWindow: null,
		dialogWindowId: 'attributes-chooser',
		overlayShowEffectOptions: null,
		overlayHideEffectOptions: null,
		insertFunction: 'AttributeClass.insertVariable',
		init: function(textareaElementId, insertFunction) {
			if ($(textareaElementId)) {
				this.textareaElementId = textareaElementId;
			}
			if (insertFunction) {
				this.insertFunction = insertFunction;
			}
		},

		resetData: function() {
			this.variablesContent = null;
			this.dialogWindow = null;
		},

		openVariableChooser: function(variables) {
			if (this.variablesContent == null && variables) {
				this.variablesContent = '<ul>';
				variables.each(function(variableGroup) {
					if (variableGroup.label && variableGroup.value) {
						this.variablesContent += '<li><b>' + variableGroup.label + '</b></li>';
						(variableGroup.value).each(function(variable){
							if (variable.value && variable.label) {
								this.variablesContent += '<li style="padding-left: 20px;">' +
									this.prepareVariableRow(variable.value, variable.label) + '</li>';
							}
						}.bind(this));
					}
				}.bind(this));
				this.variablesContent += '</ul>';
			}
			if (this.variablesContent) {
				this.openDialogWindow(this.variablesContent);
			}
		},
		openDialogWindow: function(variablesContent) {
			if ($(this.dialogWindowId) && typeof(Windows) != 'undefined') {
				Windows.focus(this.dialogWindowId);
				return;
			}

			this.overlayShowEffectOptions = Windows.overlayShowEffectOptions;
			this.overlayHideEffectOptions = Windows.overlayHideEffectOptions;
			Windows.overlayShowEffectOptions = {duration:0};
			Windows.overlayHideEffectOptions = {duration:0};

			this.dialogWindow = Dialog.info(variablesContent, {
				draggable:true,
				resizable:true,
				closable:true,
				className:"magento",
				windowClassName:"popup-window",
				title:'Insert Attribute...',
				width:700,
				//height:270,
				zIndex:1000,
				recenterAuto:false,
				hideEffect:Element.hide,
				showEffect:Element.show,
				id:this.dialogWindowId,
				onClose: this.closeDialogWindow.bind(this)
			});
			variablesContent.evalScripts.bind(variablesContent).defer();
		},
		closeDialogWindow: function(window) {
			if (!window) {
				window = this.dialogWindow;
			}
			if (window) {
				window.close();
				Windows.overlayShowEffectOptions = this.overlayShowEffectOptions;
				Windows.overlayHideEffectOptions = this.overlayHideEffectOptions;
			}
		},
		prepareVariableRow: function(varValue, varLabel) {
			var value = (varValue).replace(/"/g, '&quot;').replace(/'/g, '\\&#39;');
			var content = '<a href="#" onclick="'+this.insertFunction+'(\''+ value +'\');">' + varLabel + '</a>';
			return content;
		},
		insertVariable: function(value) {
			this.closeDialogWindow(this.dialogWindow);
			var textareaElm = $(this.textareaElementId);
			if (textareaElm) {
				var scrollPos = textareaElm.scrollTop;
				updateElementAtCursor(textareaElm, value);
				textareaElm.focus();
				textareaElm.scrollTop = scrollPos;
				textareaElm = null;
			}
			return;
		}
	};
    var templateControl = {
		attributes: null,
        openVariableChooser: function() {
            AttributeClass.init('content');
			
            if (this.attributes == null) {
                Variables.resetData();
                this.attributes = $('attributes').value.evalJSON();
                var templateAttributesValue = $('template_attributes').value;
                if (this.attributes && templateAttributesValue) {
                    if (templateAttributes = templateAttributesValue.evalJSON()) {
                        this.attributes.push(templateAttributes);
                    }
                }
            }
            if (this.attributes) {
                AttributeClass.openVariableChooser(this.attributes);
            }
        }
    };

//]]>
</script>